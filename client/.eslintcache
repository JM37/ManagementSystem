[{"W:\\code\\management\\src\\components\\Product.js":"1","W:\\code\\React Project\\management\\client\\src\\reportWebVitals.js":"2","W:\\code\\React Project\\management\\client\\src\\components\\Product.js":"3","W:\\code\\React Project\\management\\client\\src\\App.js":"4","W:\\code\\React Project\\management\\client\\src\\index.js":"5","W:\\code\\React Project\\management\\client\\src\\components\\ProductAdd.js":"6","W:\\code\\React Project\\management\\client\\src\\components\\ProductDelete.js":"7","W:\\code\\React Project\\management\\client\\src\\serviceWorker.js":"8","W:\\code\\React Project\\management\\client\\src\\components\\ProductMemo.js":"9","W:\\code\\React Project\\management\\client\\src\\components\\ProductStatus.js":"10"},{"size":788,"mtime":1611329167875,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1611073108167,"results":"13","hashOfConfig":"14"},{"size":1388,"mtime":1611598600377,"results":"15","hashOfConfig":"14"},{"size":6674,"mtime":1611682194365,"results":"16","hashOfConfig":"14"},{"size":677,"mtime":1611477406712,"results":"17","hashOfConfig":"14"},{"size":4873,"mtime":1611598799852,"results":"18","hashOfConfig":"14"},{"size":1980,"mtime":1611561196560,"results":"19","hashOfConfig":"14"},{"size":4948,"mtime":1611477305195,"results":"20","hashOfConfig":"14"},{"size":1942,"mtime":1611677599254,"results":"21","hashOfConfig":"14"},{"size":856,"mtime":1611667496275,"results":"22","hashOfConfig":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ga4hoo",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"iopjnk",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},"W:\\code\\management\\src\\components\\Product.js",[],"W:\\code\\React Project\\management\\client\\src\\reportWebVitals.js",[],"W:\\code\\React Project\\management\\client\\src\\components\\Product.js",[],"W:\\code\\React Project\\management\\client\\src\\App.js",[],"W:\\code\\React Project\\management\\client\\src\\index.js",[],["48","49"],"W:\\code\\React Project\\management\\client\\src\\components\\ProductAdd.js",["50"],"import React from 'react'\r\nimport { post } from 'axios';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n    hidden: {\r\n        display: 'none'\r\n    }\r\n});\r\n\r\nclass ProductAdd extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            cdkey: '',\r\n            macaddress: '',\r\n            username: '',\r\n            company: '',\r\n            email: '',\r\n            telephone: '',\r\n            memo: '',\r\n            open: false\r\n        };\r\n        \r\n        this.handleFormSubmit = this.handleFormSubmit.bind(this)\r\n        this.handleValueChange = this.handleValueChange.bind(this)\r\n        this.addProduct = this.addProduct.bind(this)\r\n        this.handleClickOpen = this.handleClickOpen.bind(this)\r\n        this.handleClose = this.handleClose.bind(this)\r\n    }\r\n\r\n    handleFormSubmit (e) {\r\n        e.preventDefault()\r\n        this.addProduct()\r\n            .then((response) => {\r\n                console.log(response.data);\r\n                this.props.stateRefresh();\r\n            });\r\n        this.setState ({\r\n            cdkey: '',\r\n            macaddress: '',\r\n            username: '',\r\n            company: '',\r\n            email: '',\r\n            telephone: '',\r\n            memo: '',\r\n            open: false\r\n        });\r\n    }\r\n\r\n    handleValueChange (e) {\r\n        let nextState = {};\r\n        nextState[e.target.name] = e.target.value;\r\n        this.setState(nextState);\r\n      }\r\n\r\n    addProduct ()  {\r\n        const url = '/api/products';\r\n        const formData = new FormData();\r\n        formData.append('cdkey', this.state.cdkey);\r\n        formData.append('macaddress', this.state.macaddress);\r\n        formData.append('username', this.state.username);\r\n        formData.append('company', this.state.company);\r\n        formData.append('email', this.state.email);\r\n        formData.append('telephone', this.state.telephone);\r\n        formData.append('memo', this.state.memo);\r\n        formData.append('createData', this.state.createData);\r\n        const config = {\r\n            headers: {\r\n                'content-type': 'multipart/form-data'\r\n            }\r\n        };\r\n        return post(url, formData, config);\r\n    }\r\n\r\n    handleClickOpen ()  {\r\n        this.setState({\r\n            open: true\r\n        });\r\n    }\r\n\r\n    handleClose () {\r\n        this.setState({\r\n            cdkey: '',\r\n            macaddress: '',\r\n            username: '',\r\n            company: '',\r\n            email: '',\r\n            telephone: '',\r\n            memo: '',\r\n            open: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={this.handleClickOpen}>\r\n                    제품추가\r\n                </Button>\r\n                <Dialog open={this.state.open} onClose={this.handleClose}>\r\n                    <DialogTitle>제품 추가</DialogTitle>\r\n                    <DialogContent>\r\n                        <TextField label=\"CD-Key\" type=\"text\" name=\"cdkey\" value={this.state.cdkey} onChange={this.handleValueChange} /><br />\r\n                        <TextField label=\"Mac-Address\" type=\"text\" name=\"macaddress\" value={this.state.macaddress} onChange={this.handleValueChange} /><br />\r\n                        <TextField label=\"User Name\" type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleValueChange} /><br />\r\n                        <TextField label=\"Company\" type=\"text\" name=\"company\" value={this.state.company} onChange={this.handleValueChange} /><br />\r\n                        <TextField label=\"E-Mail\" type=\"text\" name=\"email\" value={this.state.email} onChange={this.handleValueChange} /><br />\r\n                        <TextField label=\"Telephone\" type=\"text\" name=\"telephone\" value={this.state.telephone} onChange={this.handleValueChange} /><br />\r\n                        <TextField label=\"Memo\" type=\"text\" name=\"memo\" value={this.state.memo} onChange={this.handleValueChange} /><br />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.handleFormSubmit}>추가</Button>\r\n                        <Button variant=\"outlined\" color=\"primary\" onClick={this.handleClose}>닫기</Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(ProductAdd);",["51","52"],"W:\\code\\React Project\\management\\client\\src\\components\\ProductDelete.js",[],"W:\\code\\React Project\\management\\client\\src\\serviceWorker.js",[],["53","54"],"W:\\code\\React Project\\management\\client\\src\\components\\ProductMemo.js",[],"W:\\code\\React Project\\management\\client\\src\\components\\ProductStatus.js",["55"],"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass ProductStatus extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n    }\r\n\r\n    dataStatus(id){\r\n        const url = '/api/products/' + id;\r\n        fetch(url, {\r\n           method: 'put' \r\n        });\r\n        this.props.stateRefresh();\r\n        \r\n    }\r\n\r\n    render() {\r\n        const sta = true;\r\n        return (\r\n            sta === true?\r\n            <div>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={(e) => { this.dataStatus(this.props.id) }}>Enable</Button>\r\n            </div> :\r\n            <div> \r\n                <Button variant=\"outline\" color=\"primary\" onClick={(e) => { this.dataStatus(this.props.id) }}>Disable</Button> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProductStatus;",{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":103,"column":17,"nodeType":"62","messageId":"63","endLine":103,"endColumn":24},{"ruleId":"56","replacedBy":"64"},{"ruleId":"58","replacedBy":"65"},{"ruleId":"56","replacedBy":"66"},{"ruleId":"58","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":6,"column":5,"nodeType":"70","messageId":"71","endLine":9,"endColumn":6},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-unused-vars","'classes' is assigned a value but never used.","Identifier","unusedVar",["72"],["73"],["72"],["73"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]